<?xml version="1.0"?>
<!DOCTYPE sdmetricsmetamodel SYSTEM 'metamodel.dtd'>

<!-- metamodel.xml

SDMetrics V2.3 default metamodel definition file for UML2.x
Copyright (c) 2002-2018 Juergen Wuest

The MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this SDMetrics project file (the "Project File"), to deal in the Project File 
without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Project File, and to permit persons to whom the Project File is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Project File.

THE PROJECT FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE PROJECT FILE.

Note: this license grant only applies to this Project File, and not to any
other part of SDMetrics.

-->

<sdmetricsmetamodel version="2.0">


    <modelelement name="sdmetricsbase">
        <attribute name="context" type="ref">Owner of the element in the UML
            model.
        </attribute>
        <attribute name="id">Unique identifier of the model element.</attribute>
        <attribute name="name">Name of the element in UML model.</attribute>
        <attribute name="comments" type="ref" multiplicity="many">The comments
            for the model element.
        </attribute>
        <attribute name="umltype">The uml type of the element. This
            is useful when an attribute has an abstract class as its type.
        </attribute>
    </modelelement>

    <!-- Abstract stuff defined for reusability -->

    <!-- Abstract stuff from common structure -->
    <modelelement name="typedelement">
        <attribute name="type" type="ref"/>
    </modelelement>

    <modelelement name="multiplicityelement" parent="typedelement">
        <attribute name="ordered">Boolean indicating if the
            element is ordered.
        </attribute>
        <attribute name="unique">Boolean indicating if the value(s)
            of the elemnt are unique
        </attribute>
        <attribute name="lower">Result of lower specification</attribute>
        <attribute name="lowerValue" type="ref">The lower bound for the
            multiplicity.
        </attribute>
        <attribute name="upper">Result of upper specification</attribute>
        <attribute name="upperValue" type="ref">The upper bound for the
            multiplicity.
        </attribute>
        <attribute name="href" >A link to the primitive type</attribute>
    </modelelement>

    <!-- abstract stuff from classification -->

    <modelelement name="classifier">
        <attribute name="abstract">Boolean indicating if the element is
            abstract.
        </attribute>
        <attribute name="leaf">Boolean indicating if the element can have
            specializations.
        </attribute>
        <attribute name="visibility">Visibility of the element (public,
            protected, package, private).
        </attribute>
        <attribute name="collaborationuses" type="ref"
                   multiplicity="many">CollaborationUses owned by
            the classifier
        </attribute>
        <attribute name="generalization" type="ref" multiplicity="many">
            Generalizations where this classifier is the specializing one.
        </attribute>
        <attribute name="substitution" type="ref"
                   multiplicity="many">
            Substitutions owned by the classifier.
        </attribute>
    </modelelement>

    <modelelement name="feature">
        <attribute name="static">Boolean indicating if the feature
            applies to instance of or the classifier itself
        </attribute>
        <attribute name="visibility">Visibility of the operation (public,
            private, protected, package).
        </attribute>
    </modelelement>


    <!-- classes, interfaces, attributes, operations -->
    <modelelement name="class" parent="classifier">
        <attribute name="ownedattributes" type="ref" multiplicity="many">The
            attributes of the element.
        </attribute>
        <attribute name="ownedoperations" type="ref" multiplicity="many">The
            operations of the element.
        </attribute>
        <attribute name="nestedclassifiers" type="ref" multiplicity="many">The
            nested classifiers of the element.
        </attribute>
        <attribute name="interfacerealizations" type="ref" multiplicity="many">
            The interface realizations owned by the element.
        </attribute>
        <attribute name="connectors" type="ref" multiplicity="many">The
            connectors owned by the element.
        </attribute>
        <attribute name="ownedbehaviors" type="ref" multiplicity="many">Behavior
            specifications owned by the collaboration.
        </attribute>
    </modelelement>

    <modelelement name="interface">
        <attribute name="visibility">Visibility of the interface.</attribute>
        <attribute name="ownedattributes" type="ref" multiplicity="many">The
            attributes of the interface.
        </attribute>
        <attribute name="ownedoperations" type="ref" multiplicity="many">The
            operations of the interface.
        </attribute>
        <attribute name="nestedclassifiers" type="ref" multiplicity="many">The
            nested classifiers of the interface.
        </attribute>
        <attribute name="generalizations" type="ref" multiplicity="many">The
            generalizations owned by the interface.
        </attribute>
    </modelelement>

    <modelelement name="datatype" parent="classifier">
        <attribute name="ownedattributes" type="ref" multiplicity="many">The
            attributes of the element.
        </attribute>
        <attribute name="ownedoperations" type="ref" multiplicity="many">The
            operations of the element.
        </attribute>
        <attribute name="generalizations" type="ref" multiplicity="many">The
            generalizations owned by the element.
        </attribute>
    </modelelement>

    <modelelement name="enumeration" parent="datatype">
        <attribute name="ownedliterals" type="ref" multiplicity="many">The
            literals of the enumeration.
        </attribute>
    </modelelement>

    <modelelement name="enumerationliteral"/>

    <modelelement name="primitivetype" parent="datatype">
        <attribute name="href">
            A link to the predefined primitive type
        </attribute>
    </modelelement>

    <modelelement name="connector" parent="typedelement">
        <attribute name="ends" type="ref" multiplicity="many">The connector ends
            of the connector.
        </attribute>
    </modelelement>

    <modelelement name="connectorend" parent="multiplicityelement">
        <attribute name="role" type="ref">The element that is attached at this
            connector end.
        </attribute>
    </modelelement>

    <modelelement name="property" parent="multiplicityelement">
        <attribute name="visibility">Visibility of the feature (public, private,
            protected, package).
        </attribute>
        <attribute name="propertytype" type="ref">Reference to the feature type
            (class, data type etc).
        </attribute>
        <attribute name="isreadonly">Changeability of the feature. Values: true,
            false (default if not specified).
        </attribute>
        <attribute name="association" type="ref">Reference to association if
            this is an association end.
        </attribute>
        <attribute name="aggregation">The aggregation kind of the property:
            shared, composite, or none (default).
        </attribute>
        <attribute name="qualifiers" type="ref" multiplicity="many">The
            qualifier attributes of the property.
        </attribute>
        <attribute name="default" type="ref">The default value for
            the property.
        </attribute>
        <attribute name="static">If the property describes instances
            of or the classifier itself.
        </attribute>
    </modelelement>

    <modelelement name="port" parent="property">
        <attribute name="behavior">Boolean indicating if the
            incoming requests are delegated to the
            ClassifierBehavior.
        </attribute>
        <attribute name="conjugated">Boolean indicating how to
            derive the provided and required interfaces of the port.
        </attribute>
        <attribute name="service">Boolean indicating if the rest of
            the system can use part of the functionality of the
            component via the port.
        </attribute>
    </modelelement>

    <modelelement name="operation" parent="feature">

        <attribute name="abstract">Boolean indicating if operation is
            abstract.
        </attribute>
        <attribute name="isquery">Boolean indicating if operation is a query
            that does not change the classifier's state.
        </attribute>
        <attribute name="ownedparameters" type="ref" multiplicity="many">The
            parameters of the operation.
        </attribute>
        <attribute name="concurrency">The concurrency of the
            operation.
        </attribute>
        <attribute name="exceptions" type="ref" multiplicity="many">The
            exceptions that could occur during the execution of the operation.
        </attribute>
    </modelelement>

    <modelelement name="parameter" parent="multiplicityelement">
        <attribute name="kind">The direction of the parameter: in (default),
            out, inout, return.
        </attribute>
        <attribute name="parametertype" type="ref">Reference to the parameter
            type (class, data type etc).
        </attribute>
        <attribute name="effect">CRUD effect on the parameter.</attribute>
        <attribute name="exception">Boolean indicating whether the
            parameter is an exception.
        </attribute>
        <attribute name="stream">Boolean indicatin whether the
            parameter is streamed.
        </attribute>
        <attribute name="default" type="ref">The default value for
            the parameter.
        </attribute>
        <attribute name="defaultstring">
            String representing the default value
        </attribute>
    </modelelement>

    <modelelement name="method"/>
    <!-- Abstract stuff from common behavior -->

    <modelelement name="behavior" parent="class">
        <attribute name="reentrant">Boolean indicating if the
            behavior can be executed multiple times at the same time.
        </attribute>
        <attribute name="parameters" type="ref" multiplicity="many">The
            parameters of the behavior.
        </attribute>
        <attribute name="post" type="ref" multiplicity="many">The postcondition
            of the behavior.
        </attribute>
        <attribute name="pre" type="ref" multiplicity="many">The precondition of
            the behavior.
        </attribute>
        <attribute name="specification" type="ref">The operation the
            behavior implements.
        </attribute>
    </modelelement>
    <!-- models, packages -->

    <modelelement name="package">
        <attribute name="ownedmembers" type="ref" multiplicity="many">The owned
            member elements.
        </attribute>
        <attribute name="profileapplications" type="ref"
                   multiplicity="many">The profiles applied to the
            package.
        </attribute>
    </modelelement>

    <modelelement name="model" parent="package"/>

    <modelelement name="profile" parent="package">
        <attribute name="metaclasses" type="ref" multiplicity="many">The
            metaclasses that may be extended.
        </attribute>
        <attribute name="metapackages" type="ref"
                   multiplicity="many">Packages containing metaclasses.
        </attribute>
    </modelelement>

    <modelelement name="profileapplication">
        <attribute name="applied" type="ref">The profile applied to
            the package.
        </attribute>
        <attribute name="applying" type="ref">The package applying
            the profile.
        </attribute>
        <attribute name="strict">Boolean indicating if filtering
            should be used.
        </attribute>
    </modelelement>

    <modelelement name="elementimport">
        <attribute name="importer" type="ref">The importing
            namespace.
        </attribute>
        <attribute name="imported" type="ref">The imported element.</attribute>
        <attribute name="visibility">The visibility of the imported element
            in the importing namespace.
        </attribute>
    </modelelement>

    <modelelement name="packageimport" parent="elementimport"/>

    <!-- relationships: association, generalization, ... -->
    <modelelement name="association">
        <attribute name="memberends" type="ref" multiplicity="many">The member
            ends of the association.
        </attribute>
        <attribute name="ownedends" type="ref" multiplicity="many">The owned
            ends of the association (not navigable association ends).
        </attribute>
        <attribute name="generalizations" type="ref" multiplicity="many">The
            generalizations owned by the association.
        </attribute>
    </modelelement>

    <modelelement name="associationclass" parent="association"/>

    <modelelement name="generalization">
        <attribute name="general" type="ref">Link to the parent in the
            generalization.
        </attribute>
        <attribute name="specific" type="ref">Link to the child in
            the generalization.
        </attribute>
        <attribute name="substitutable">
            Boolean indicating if the specific classifier can be used in the
            general's stead.
        </attribute>
    </modelelement>
    <modelelement name="generalizationset">
        <attribute name="disjoint">
            Boolean indicating if a classifier can only be classified by
            one specialization in the set. Default is false.
        </attribute>
        <attribute name="covering">
            Boolean indicating if allspecializations for this generalizationset
            have been found. Default is false.
        </attribute>
        <attribute name="generalizations" type="ref"
                   multiplicity="many">
            The generalizations participating in this set.
        </attribute>
        <attribute name="powertype" type="ref">
            The powertype of the generalization. Whatever that is.
        </attribute>
    </modelelement>

    <modelelement name="interfacerealization">
        <attribute name="contract" type="ref">Link to the realized interface.
        </attribute>
        <attribute name="implementation" type="ref">Link to the
            realizing classifier.
        </attribute>
    </modelelement>

    <modelelement name="dependency">
        <attribute name="supplier" type="ref" multiplicity="many">Links to the
            supplier elements of the relationship.
        </attribute>
        <attribute name="client" type="ref" multiplicity="many">Links to the
            client elements of the relationship.
        </attribute>
    </modelelement>

    <modelelement name="abstraction" parent="dependency">
        <attribute name="mapping" type="ref">
            States the kind of abstraction between supplier(s) and client(s).
        </attribute>
    </modelelement>

    <modelelement name="realization" parent="abstraction"/>

    <modelelement name="substitution" parent="realization"/>

    <modelelement name="usage" parent="dependency"/>

    <modelelement name="componentrealization" parent="realization">
        <attribute name="component" type="ref">
            The component being realized.
        </attribute>
    </modelelement>


    <!-- instance specifications, connectors. -->

    <modelelement name="collaboration" parent="class">
    </modelelement>

    <modelelement name="collaborationuse">
        <attribute name="roles" type="ref" multiplicity="many">Relates a
            feature of the collaboration to a feature of the classifier.
        </attribute>
        <attribute name="type" type="ref">The collaboration used
            here.
        </attribute>
    </modelelement>

    <modelelement name="instancespecification">
        <attribute name="classifier" type="ref" multiplicity="many">Links to the
            classifiers that this entity is an instance of.
        </attribute>
        <attribute name="slots" type="ref" multiplicity="many">Holding the
            values for the attributes of the classifier.
        </attribute>
        <attribute name="specification" type="ref">A specification
            on how to compute the instance.
        </attribute>
    </modelelement>

    <modelelement name="slot">
        <attribute name="defining" type="ref">The feature that gets
            its value from the slot.
        </attribute>
        <attribute name="value" type="ref" multiplicity="many">
            The value held by the slot.
        </attribute>
    </modelelement>

    <!-- state machines -->
    <modelelement name="statemachine" parent="behavior">
        <attribute name="regions" type="ref" multiplicity="many">The top-level
            regions owned by the state machine.
        </attribute>
        <attribute name="isprotocol">Boolean indicating if this is a protocol
            state machine
        </attribute>
        <attribute name="connectionpoints" type="ref" multiplicity="many">The
            connection points of the state machine.
        </attribute>
    </modelelement>

    <modelelement name="region">
        <attribute name="subvertices" type="ref" multiplicity="many">The states
            contained in the region.
        </attribute>
        <attribute name="transitions" type="ref" multiplicity="many">The
            transitions contained in the region.
        </attribute>
        <attribute name="statemachine" type="ref">The statemachine
            owning the region.
        </attribute>
        <attribute name="state" type="ref">The state owning the
            region.
        </attribute>
    </modelelement>

    <modelelement name="state">
        <attribute name="kind">The kind of state: '' (empty), final, initial,
            deepHistory, shallowHistory, join, fork, choice, junction,
            entryPoint, exitPoint, terminate.
        </attribute>
        <attribute name="regions" type="ref" multiplicity="many">The regions of
            the composite or concurrent state.
        </attribute>
        <attribute name="entry" type="ref">The entry
            behavior of the state.
        </attribute>
        <attribute name="exit" type="ref">The exit
            behavior of the state.
        </attribute>
        <attribute name="doactivity" type="ref">The
            do-activities of the state.
        </attribute>
        <attribute name="connectionpoints" type="ref" multiplicity="many">The
            connection points of the state.
        </attribute>
        <attribute name="submachine" type="ref">The submachine this
            state refers to.</attribute>
    </modelelement>

    <modelelement name="transition">
        <attribute name="kind">The kind of transition: external,
            internal, or local.
        </attribute>
        <attribute name="isprotocol">Boolean indicating if this is a protocol
            transition.
        </attribute>
        <attribute name="transsource" type="ref">The source state of the
            transition.
        </attribute>
        <attribute name="transtarget" type="ref">The target state of the
            transition.
        </attribute>
        <attribute name="triggers" type="ref" multiplicity="many">The triggers
            that may fire the transition.
        </attribute>
        <attribute name="guard" type="ref">The guard of the transition.
        </attribute>
        <attribute name="effect" type="ref">The activity to be performed when
            the transition fires.
        </attribute>
        <attribute name="container" type="ref">The region
            containing the transition.
        </attribute>
    </modelelement>

    <modelelement name="constraint">
        <attribute name="specification" type="ref">The condition
            that determines whether this constraint holds.
        </attribute>
        <attribute name="constrainedElement" type="ref"
                   multiplicity="many">The elements affected by the
            constraint
        </attribute>
    </modelelement>

    <modelelement name="interval">
        <attribute name="max">Upper bound of the range.</attribute>
        <attribute name="min">Lower bound of the range.</attribute>
    </modelelement>

    <modelelement name="intervalconstraint" parent="constraint">
        <attribute name="intervalspecification" type="ref">The
            interval specifying the constraint
        </attribute>
    </modelelement>

    <modelelement name="trigger">
        <attribute name="event" type="ref">The event causing the trigger.
        </attribute>
    </modelelement>

    <modelelement name="event">
        <attribute name="kind">The kind of event (signal, call,
            change, time, anyreceive).
        </attribute>
        <attribute name="linkedeventelement" type="ref">The element (signal,
            operation, boolean expression, or deadline) that raised the event,
            if any.
        </attribute>
    </modelelement>

    <!-- Value specifications  -->
    <modelelement name="expression"/>

    <modelelement name="literal">
        <attribute name="value">The literal value</attribute>
    </modelelement>

    <modelelement name="opaqueexpression">
        <attribute name="body" multiplicity="many">The
            body of the expression.
        </attribute>
        <attribute name="language" multiplicity="many">The
            language(s) of the body string(s).
        </attribute>
    </modelelement>
    <modelelement name="instancevalue">
        <attribute name="instance" type="ref">The specification for
            the instance.
        </attribute>
    </modelelement>

    <modelelement name="literalboolean" parent="literal"/>

    <modelelement name="literalinteger" parent="literal"/>

    <modelelement name="literalreal" parent="literal"/>

    <modelelement name="literalstring" parent="literal"/>

    <modelelement name="literalunlimitednatural" parent="literal"/>

    <modelelement name="literalnull" parent="literal"/>

    <!-- components, nodes -->
    <modelelement name="component" parent="class">
        <attribute name="realizations" type="ref" multiplicity="many">The
            realizations owned by the component.
        </attribute>
        <attribute name="members" type="ref" multiplicity="many">Other members
            owned by the component.
        </attribute>
    </modelelement>

    <!-- concrete behaviors -->

    <modelelement name="opaquebehavior" parent="opaqueexpression">
        <attribute name="reentrant">Boolean indicating if the
            behavior can be executed multiple times at the same time.
        </attribute>
        <attribute name="parameters" type="ref" multiplicity="many">The
            parameters of the behavior.
        </attribute>
        <attribute name="post" type="ref" multiplicity="many">The postcondition
            of the behavior.
        </attribute>
        <attribute name="pre" type="ref" multiplicity="many">The precondition of
            the behavior.
        </attribute>
        <attribute name="specification" type="ref">The operation the
            behavior implements.
        </attribute>
    </modelelement>

    <modelelement name="functionbehavior" parent="opaquebehavior"/>

    <!-- comments, stereotypes  -->
    <modelelement name="stereotype" parent="class"/>

    <modelelement name="comment">
        <attribute name="body">The comment text.</attribute>
        <attribute name="annotated" type="ref" multiplicity="many">
            The elements the comment applies to.
        </attribute>
    </modelelement>

</sdmetricsmetamodel>

